'''
Объявите класс с именем Translator (для перевода с английского на русский) со следующими методами:
add(self, eng, rus) - для добавления новой связки английского и русского слова (если английское слово уже существует, то новое русское слово добавляется как синоним для перевода, например, до идти, ходить, ехать); если связка eng-rus уже существует, то второй раз ее добавлять не нужно, например: add('go', 'идти'), add('go', 'идти);
remove(self, eng) для удаления связки по указанному английскому слову;
translate(self, eng) - для перевода с английского на русский (метод должен возвращать список из русских слов, соответствующих переводу английского слова, даже если в списке всего одно слово).
Все добавления и удаления связок должны выполняться внутри каждого конкретного объекта класса Translator, т.е. связки хранить локально внутри экземпляров классов класса Translator.
Создайте экземпляр tr класса Translator и вызовите метод add для следующих связок:
    tree - дерево
    саг - машина
    саг- автомобиль
    leaf - лист
    river-река
    go - идти
    go - ехать
    go - ходить
    milk - молоко

Затем методом remove() удалите связку для английского слова саг. С помощью метода translate() переведите слово до. Результат выведите на экран в виде строки из всех русских слов, связанных со словом до:
Вывод в формате: 
    идти ехать ходить

В классе GamePole должны быть также реализованы следующие методы:
init() - инициализация поля с новой расстановкой М мин (случайным образом по игровому полю, разумеется каждая мина должна находиться в отдельной клетке).
show() - отображение поля в консоли в виде таблицы чисел открытых клеток (если клетка не открыта, то отображается символ #).
При создании экземпляра класса GamePole в его инициализаторе следует вызывать метод init() для первоначальной инициализации игрового поля.
В классе GamePole могут быть и другие вспомогательные методы.
Создайте экземпляр pole_game класса GamePole с размером поля N = 10 и числом мин М = 12.
'''